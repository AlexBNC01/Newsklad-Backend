const { Pool } = require('pg');

// URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Timeweb  
// –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ URL
const databaseVariants = [
  process.env.DATABASE_URL,
  'postgresql://gen_user:%2Fd%2FgQAoi7J%26%26Yd@37.252.23.194:5432/gen_user',
  'postgresql://gen_user:%2Fd%2FgQAoi7J%26%26Yd@37.252.23.194:5432/default_db', 
  'postgresql://gen_user:%2Fd%2FgQAoi7J%26%26Yd@37.252.23.194:5432/postgres'
].filter(Boolean);

let DATABASE_URL = null;
let connectionAttempt = 0;

console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
console.log('üîó –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã:', databaseVariants.length);

let pool = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º URL
const createPool = (url) => {
  return new Pool({
    connectionString: url,
    ssl: false,
    max: 10,
    min: 1,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 10000,
    acquireTimeoutMillis: 10000,
  });
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const createPoolFromConfig = (dbName) => {
  return new Pool({
    host: '37.252.23.194',
    port: 5432,
    database: dbName,
    user: 'gen_user',
    password: '/d/gQAoi7J&&Yd',
    ssl: false,
    max: 10,
    min: 1,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 10000,
    acquireTimeoutMillis: 10000,
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
const checkConnection = async () => {
  for (let i = 0; i < databaseVariants.length; i++) {
    const url = databaseVariants[i];
    connectionAttempt = i + 1;
    
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${connectionAttempt}/${databaseVariants.length}:`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
      const dbUrl = new URL(url);
      console.log('üè† Host:', dbUrl.hostname);
      console.log('üîå Port:', dbUrl.port);
      console.log('üë§ User:', dbUrl.username);
      console.log('üíæ Database:', dbUrl.pathname.slice(1));
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testPool = createPool(url);
      const client = await testPool.connect();
      const result = await client.query('SELECT NOW() as current_time, version() as version');
      client.release();
      await testPool.end();
      
      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!');
      console.log('üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ë–î:', result.rows[0].current_time);
      console.log('üì¶ –í–µ—Ä—Å–∏—è PostgreSQL:', result.rows[0].version.split(' ')[0]);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–π URL –∏ —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª
      DATABASE_URL = url;
      pool = createPool(url);
      
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç ${connectionAttempt}: ${dbUrl.pathname.slice(1)}`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå –í–∞—Ä–∏–∞–Ω—Ç ${connectionAttempt} –ø—Ä–æ–≤–∞–ª–µ–Ω:`, error.message);
      console.error('üîç –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      
      // –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      if (i < databaseVariants.length - 1) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç...');
      }
    }
  }
  
  // –ï—Å–ª–∏ URL –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç...');
  
  const configVariants = ['gen_user', 'default_db', 'postgres'];
  
  for (let i = 0; i < configVariants.length; i++) {
    const dbName = configVariants[i];
    connectionAttempt = databaseVariants.length + i + 1;
    
    try {
      console.log(`üîÑ –ö–æ–Ω—Ñ–∏–≥ –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${configVariants.length}: ${dbName}`);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testPool = createPoolFromConfig(dbName);
      const client = await testPool.connect();
      const result = await client.query('SELECT NOW() as current_time, version() as version');
      client.release();
      await testPool.end();
      
      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ë–î:', result.rows[0].current_time);
      console.log('üì¶ –í–µ—Ä—Å–∏—è PostgreSQL:', result.rows[0].version.split(' ')[0]);
      
      // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª
      pool = createPoolFromConfig(dbName);
      DATABASE_URL = `postgresql://gen_user:***@37.252.23.194:5432/${dbName}`;
      
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ë–î: ${dbName}`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå –ö–æ–Ω—Ñ–∏–≥ –≤–∞—Ä–∏–∞–Ω—Ç ${dbName} –ø—Ä–æ–≤–∞–ª–µ–Ω:`, error.message);
      console.error('üîç –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      
      if (i < configVariants.length - 1) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –≤–∞—Ä–∏–∞–Ω—Ç...');
      }
    }
  }
  
  console.error('üí• –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!');
  return false;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const createTables = async () => {
  try {
    console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
    
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        role VARCHAR(50) DEFAULT 'user',
        email_verified BOOLEAN DEFAULT FALSE,
        verification_code VARCHAR(255),
        verification_expires TIMESTAMP,
        login_attempts INTEGER DEFAULT 0,
        locked_until TIMESTAMP,
        last_login TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS companies (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        owner_id INTEGER REFERENCES users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS parts (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        sku VARCHAR(100) UNIQUE,
        quantity INTEGER DEFAULT 0,
        price DECIMAL(10,2),
        company_id INTEGER REFERENCES companies(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const query = async (text, params) => {
  const start = Date.now();
  try {
    const result = await pool.query(text, params);
    const duration = Date.now() - start;
    console.log('üìä –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞', duration, '–º—Å');
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    throw error;
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  pool,
  query,
  checkConnection,
  createTables
};