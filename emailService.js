const nodemailer = require('nodemailer');
const crypto = require('crypto');

class EmailService {
  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    this.transporter = null;
    this.initializeTransporter();
  }

  initializeTransporter() {
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö SMTP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    const emailConfig = {
      // Gmail SMTP (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Gmail)
      gmail: {
        service: 'gmail',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASSWORD // App Password –¥–ª—è Gmail
        }
      },
      
      // Yandex SMTP (–¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      yandex: {
        host: 'smtp.yandex.ru',
        port: 465,
        secure: true,
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASSWORD
        }
      },
      
      // Mail.ru SMTP
      mailru: {
        host: 'smtp.mail.ru',
        port: 465,
        secure: true,
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASSWORD
        }
      },
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π SMTP
      custom: {
        host: process.env.SMTP_HOST,
        port: process.env.SMTP_PORT || 587,
        secure: process.env.SMTP_SECURE === 'true',
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASSWORD
        }
      }
    };

    const provider = process.env.EMAIL_PROVIDER || 'custom';
    
    if (emailConfig[provider] && process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
      this.transporter = nodemailer.createTransporter(emailConfig[provider]);
      console.log('üìß Email —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', provider);
    } else {
      console.log('‚ö†Ô∏è Email —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP)');
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  generateVerificationCode() {
    return crypto.randomBytes(32).toString('hex');
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ PIN –∫–æ–¥–∞
  generatePinCode() {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async sendVerificationEmail(email, firstName, verificationCode) {
    if (!this.transporter) {
      console.log('üìß Email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω');
      return { success: false, reason: 'email_disabled' };
    }

    try {
      const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/verify?code=${verificationCode}`;
      
      const mailOptions = {
        from: `"Newsklad" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Newsklad',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2c3e50;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Newsklad!</h2>
            
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>${firstName}</strong>!</p>
            
            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º Newsklad. 
            –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.</p>
            
            <div style="text-align: center; margin: 30px 0;">
              <a href="${verificationUrl}" 
                 style="background-color: #3498db; color: white; padding: 12px 30px; 
                        text-decoration: none; border-radius: 5px; display: inline-block;">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
              </a>
            </div>
            
            <p>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞:</p>
            <p style="background-color: #f8f9fa; padding: 10px; border-radius: 3px; word-break: break-all;">
              ${verificationUrl}
            </p>
            
            <hr style="margin: 30px 0;">
            
            <p style="color: #7f8c8d; font-size: 14px;">
              <strong>–í–∞–∂–Ω–æ:</strong> –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.<br>
              –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Newsklad, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            </p>
            
            <p style="color: #7f8c8d; font-size: 12px;">
              –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
              –ö–æ–º–∞–Ω–¥–∞ Newsklad
            </p>
          </div>
        `
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('üìß Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', email);
      return { success: true, messageId: result.messageId };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error.message);
      return { success: false, error: error.message };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ PIN –∫–æ–¥–∞ –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async sendPinCode(email, firstName, pinCode) {
    if (!this.transporter) {
      return { success: false, reason: 'email_disabled' };
    }

    try {
      const mailOptions = {
        from: `"Newsklad Security" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞ - Newsklad',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 500px; margin: 0 auto;">
            <h2 style="color: #e74c3c;">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
            
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>${firstName}</strong>!</p>
            
            <p>–î–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Newsklad –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
            
            <div style="text-align: center; margin: 30px 0;">
              <div style="background-color: #f8f9fa; border: 2px solid #e74c3c; 
                          padding: 20px; border-radius: 8px; display: inline-block;">
                <span style="font-size: 32px; font-weight: bold; color: #e74c3c; 
                             letter-spacing: 5px;">${pinCode}</span>
              </div>
            </div>
            
            <p style="color: #7f8c8d; font-size: 14px;">
              <strong>–í–∞–∂–Ω–æ:</strong> –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.<br>
              –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, 
              –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
            </p>
          </div>
        `
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('üìß PIN –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', email);
      return { success: true, messageId: result.messageId };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PIN:', error.message);
      return { success: false, error: error.message };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ email —Å–µ—Ä–≤–∏—Å–∞
  async isReady() {
    if (!this.transporter) {
      return false;
    }

    try {
      await this.transporter.verify();
      return true;
    } catch (error) {
      console.error('‚ùå Email —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }
}

module.exports = new EmailService();