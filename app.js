require('dotenv').config();

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const { checkConnection, createTables, query } = require('./database');

const app = express();
const PORT = process.env.PORT || 3000;

console.log('üöÄ Newsklad Backend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
console.log('üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
console.log('üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV || 'development');
console.log('üîå –ü–æ—Ä—Ç:', PORT);
console.log('üÜï –í–µ—Ä—Å–∏—è: 1.1.0 - With PostgreSQL');

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let dbConnected = false;

const initDatabase = async () => {
  console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const connected = await checkConnection();
  if (!connected) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∂–∏–º –±–µ–∑ –ë–î)');
    return false;
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  const tablesCreated = await createTables();
  if (tablesCreated) {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    dbConnected = true;
    return true;
  }
  
  return false;
};

// –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
app.get('/', (req, res) => {
  res.json({
    message: 'Newsklad Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    version: '1.1.0',
    database: dbConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    database: dbConnected ? 'connected' : 'disconnected',
    uptime: process.uptime(),
    timestamp: new Date().toISOString(),
    version: '1.1.0'
  });
});

// API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/api/auth/register', async (req, res) => {
  try {
    const { email, password, firstName, lastName } = req.body;
    
    console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', email);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password || !firstName || !lastName) {
      return res.status(400).json({
        success: false,
        message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }
    
    if (!dbConnected) {
      // –†–µ–∂–∏–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock
      return res.json({
        success: true,
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—Ä–µ–∂–∏–º –±–µ–∑ –ë–î)',
        data: {
          user: { id: 1, email, firstName, lastName },
          token: 'mock-jwt-token'
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userExists = await query('SELECT id FROM users WHERE email = $1', [email]);
    if (userExists.rows.length > 0) {
      return res.status(409).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await query(
      'INSERT INTO users (email, password, first_name, last_name) VALUES ($1, $2, $3, $4) RETURNING id, email, first_name, last_name, created_at',
      [email, hashedPassword, firstName, lastName]
    );
    
    const user = result.rows[0];
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, email: user.email },
      process.env.JWT_SECRET || 'default-secret',
      { expiresIn: '24h' }
    );
    
    res.json({
      success: true,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      data: {
        user: {
          id: user.id,
          email: user.email,
          firstName: user.first_name,
          lastName: user.last_name,
          createdAt: user.created_at
        },
        token
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    });
  }
});

// API –¥–ª—è –≤—Ö–æ–¥–∞
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        message: '–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å'
      });
    }
    
    if (!dbConnected) {
      // –†–µ–∂–∏–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock
      return res.json({
        success: true,
        message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (—Ä–µ–∂–∏–º –±–µ–∑ –ë–î)',
        data: {
          user: { id: 1, email, firstName: '–¢–µ—Å—Ç', lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
          token: 'mock-jwt-token'
        }
      });
    }
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await query(
      'SELECT id, email, password, first_name, last_name FROM users WHERE email = $1',
      [email]
    );
    
    if (result.rows.length === 0) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      });
    }
    
    const user = result.rows[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const passwordValid = await bcrypt.compare(password, user.password);
    if (!passwordValid) {
      return res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, email: user.email },
      process.env.JWT_SECRET || 'default-secret',
      { expiresIn: '24h' }
    );
    
    res.json({
      success: true,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      data: {
        user: {
          id: user.id,
          email: user.email,
          firstName: user.first_name,
          lastName: user.last_name
        },
        token
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
    });
  }
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({
    success: false,
    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  await initDatabase();
  
  // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  const server = app.listen(PORT, '0.0.0.0', () => {
    console.log(`
‚úÖ –°–µ—Ä–≤–µ—Ä Newsklad Backend –∑–∞–ø—É—â–µ–Ω!
üìç –ê–¥—Ä–µ—Å: http://0.0.0.0:${PORT}
üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbConnected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}
üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toISOString()}
üéØ –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º!
    `);
  });
  
  server.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
  });
  
  // Graceful shutdown
  process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      process.exit(0);
    });
  });
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
  process.exit(1);
});

module.exports = app;